flutter build apk --split-per-abi
<uses-permission android:name="android.permission.INTERNET"/>


&#x2007;
<key>NSPhotoLibraryUsageDescription</key>
<string>Your app needs access to the photo library to select photos.</string>



image_picker: ^1.1.2

ImagePicker picker = ImagePicker();
XFile image = XFile('');

void onPickImage() async {
  image = await pickImage();
  if (image.path.isNotEmpty) {
    controller4.text = image.path;
    checkActive();
  }
}

Future<XFile> pickImage() async {
  try {
    final image = await ImagePicker().pickImage(source: ImageSource.gallery);
    if (image == null) return XFile('');
    return image;
  } catch (e) {
    logger(e);
    return XFile('');
  }
}



class TestRepository {
  late Dio _dio;

  TestRepository() {
    final options = BaseOptions(
      // headers: {
      //   'Content-Type': 'application/json',
      //   'Authorization': 'Bearer $token',
      // },
      receiveDataWhenStatusError: true,
      connectTimeout: const Duration(seconds: 5),
      receiveTimeout: const Duration(seconds: 5),
    );

    _dio = Dio(options);
  }

  Future<List<Album>> fetchAlbums(String endpoint) async {
    try {
      final response = await _dio.get(endpoint);
      if (response.statusCode == 200) {
        final List result = response.data;
        final albums = result.map((item) {
          return Album.fromJson(item);
        }).toList();
        return albums;
      } else {
        return [];
      }
    } catch (e) {
      return [];
    }
  }

  Future<int?> addCategory(CategoryModel category) async {
    try {
      final response = await _dio.post(
        '',
        data: {
          'title': category.title.trim(),
          'index': int.parse(category.index),
          'type': int.parse(category.type),
        },
      );
      return response.statusCode!;
    } on DioException catch (e) {
      return e.response!.statusCode;
    } catch (e) {
      return null;
    }
  }

  Future<int?> updateCategory(CategoryModel category) async {
    try {
      final response = await _dio.put(
        '',
        data: {
          'id': category.id,
          'title': category.title.trim(),
          'index': int.parse(category.index),
          'type': int.parse(category.type),
        },
      );
      return response.statusCode!;
    } on DioException catch (e) {
      return e.response!.statusCode;
    } catch (e) {
      return null;
    }
  }

  Future<int?> deleteCategory(int id) async {
    try {
      final response = await _dio.delete('${''}$id');
      return response.statusCode!;
    } on DioException catch (e) {
      return e.response!.statusCode;
    } catch (e) {
      return null;
    }
  }
}


class Album {
  final int userId;
  final int id;
  final String title;

  Album({
    required this.userId,
    required this.id,
    required this.title,
  });

  factory Album.fromJson(Map<String, dynamic> json) {
    return Album(
      userId: json['userId'],
      id: json['id'],
      title: json['title'],
    );
  }
}


import 'dart:async';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:pin_code_fields/pin_code_fields.dart';

// mask_text_input_formatter: ^2.9.0
// pin_code_fields: ^8.0.1

class PincodeField extends StatelessWidget {
  const PincodeField({
    super.key,
    required this.controller,
    required this.errorController,
    required this.onCompleted,
  });

  final TextEditingController controller;
  final StreamController<ErrorAnimationType> errorController;
  final void Function(String) onCompleted;

  @override
  Widget build(BuildContext context) {
    return PinCodeTextField(
      controller: controller,
      errorAnimationController: errorController,
      appContext: context,
      length: 4,
      animationType: AnimationType.fade,
      autoDisposeControllers: false,
      enableActiveFill: true,
      keyboardType: TextInputType.number,
      inputFormatters: [
        FilteringTextInputFormatter.digitsOnly,
      ],
      textStyle: const TextStyle(
        color: Colors.black,
        fontSize: 32,
        fontWeight: FontWeight.w500,
        fontFamily: 'MM',
      ),
      pinTheme: PinTheme(
        shape: PinCodeFieldShape.box,
        fieldHeight: 80,
        fieldWidth: 74,
        borderRadius: BorderRadius.circular(12),
        errorBorderColor: Colors.redAccent,
        activeFillColor: Colors.greenAccent,
        inactiveFillColor: Colors.greenAccent,
        selectedFillColor: Colors.greenAccent,
        activeColor: Colors.greenAccent,
        disabledColor: Colors.greenAccent,
        inactiveColor: Colors.greenAccent,
        selectedColor: Colors.greenAccent,
      ),
      onCompleted: onCompleted,
    );
  }
}
