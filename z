WidgetsFlutterBinding.ensureInitialized();


context.read<>().add();


flutter build apk --split-per-abi
<uses-permission android:name="android.permission.INTERNET"/>



&#x2007;
<key>NSPhotoLibraryUsageDescription</key>
<string>Your app needs access to the photo library to select photos.</string>



image_picker: ^1.1.2

ImagePicker picker = ImagePicker();
XFile image = XFile('');

void onPickImage() async {
  image = await pickImage();
  if (image.path.isNotEmpty) {
    controller4.text = image.path;
    checkActive();
  }
}

Future<XFile> pickImage() async {
  try {
    final image = await ImagePicker().pickImage(source: ImageSource.gallery);
    if (image == null) return XFile('');
    return image;
  } catch (e) {
    logger(e);
    return XFile('');
  }
}



final controller1 = TextEditingController();
final controller2 = TextEditingController();
final controller3 = TextEditingController();
final controller4 = TextEditingController();

bool active = false;

void checkActive() {
  setState(() {
    active = getButtonActive([
      controller1,
      controller2,
      controller3,
      controller4,
    ]);
  });
}

void onSave() {
  context.read<CafesBloc>().add();
  context.pop();
}

@override
void initState() {
  super.initState();
  controller1.text = widget.cafe.title;
  controller2.text = widget.cafe.location;
  controller3.text = widget.cafe.description;
  controller4.text = widget.cafe.image;
  image = XFile(widget.cafe.image);
}

@override
void dispose() {
  controller1.dispose();
  controller2.dispose();
  controller3.dispose();
  controller4.dispose();
  super.dispose();
}


// state
class TestLoadedState extends TestState {
  final List<TestModel> models;
  TestLoadedState({required this.models});
}

// event 
class GetTestEvent extends TestEvent {}

class AddTestEvent extends TestEvent {
  final TestModel model;
  AddTestEvent({required this.model});
}

class EditTestEvent extends TestEvent {
  final TestModel model;
  EditTestEvent({required this.model});
}

class DeleteTestEvent extends TestEvent {
  final int id;
  DeleteTestEvent({required this.id});
}

// bloc
on<GetTestEvent>((event, emit) async {
  await getModels();
  emit(TestLoadedState(models: DB.modelsList));
});

on<AddTestEvent>((event, emit) async {
  // DB.modelsList.insert(0, event.test);
  DB.modelsList.add(event.model);
  await updateModels();
  emit(TestLoadedState(models: DB.modelsList));
});

on<EditTestEvent>((event, emit) async {
  for (TestModel test in DB.modelsList) {
    if (test.id == event.model.id) {
      test.title = event.model.title;
    }
  }
  await updateModels();
  emit(TestLoadedState(models: DB.modelsList));
});

on<DeleteTestEvent>((event, emit) async {
  DB.modelsList.removeWhere((element) => element.id == event.id);
  await updateModels();
  emit(TestLoadedState(models: DB.modelsList));
});
